# 类

# 面向对象编程 是最有效的软件编写方法之一。在面向对象编程
# 中，你编写表示现实世界中的事物和情景的类，并基于这些类来创建对象。编
# 写类时，你定义一大类对象都有的通用行为。基于类创建对象 时，每个对象都
# 自动具备这种通用行为，然后可根据需要赋予每个对象独特的个性。使用面向
# 对象编程可模拟现实情景，其逼真程度达到了令人惊讶的地步。

# 根据类来创建对象称为实例化 ，这让你能够使用类的实例。在本章中，你将编
# 写一些类并创建其实例。你将指定可在实例中存储什么信息，定义可对这些实
# 例执行哪些操作。你还将编写一些类来扩展既有类的功能，让相似的类能够高
# 效地共享代码。你将把自己编写的类存储在模块中，并在自己的程序文件中导
# 入其他程序员编写的类。

# 狗是一类动物  我的狗是狗类的一个实例 狗类是个抽象概念

# 理解面向对象编程有助于你像程序员那样看世界，还可以帮助你真正明白自己
# 编写的代码：不仅是各行代码的作用，还有代码背后更宏大的概念。了解类背
# 后的概念可培养逻辑思维，让你能够通过编写程序来解决遇到的几乎任何问题。

# 随着面临的挑战日益严峻，类还能让你以及与你合作的其他程序员的生活更轻
# 松。如果你与其他程序员基于同样的逻辑来编写代码，你们就能明白对方所做
# 的工作。你编写的程序将能被众多合作者所理解，每个人都能事半功倍。


# 创建和使用类
# 使用类几乎可以模拟任何东西。下面来编写一个表示小狗的简单类Dog ，它表示的
# 不是特定的小狗，而是任何小狗。对于大多数宠物狗，我们都知道些什么呢？它们
# 都有名字和年龄。我们还知道，大多数小狗还会蹲下和打滚。由于大多数小狗都具
# 备上述两项信息（名字和年龄）和两种行为（蹲下和打滚），我们的Dog 类将包含
# 它们。这个类让Python知道如何创建表示小狗的对象。编写这个类后，我们将使用它来创建表示特定小狗的实例。

# 创建Dog 类
class Dog:
    """一次模拟小狗的简单尝试。"""

    def __init__(self, name, age):
        """初始化属性name和age。"""
        self.name = name
        self.age = age

    def sit(self):
        """模拟小狗收到命令时蹲下。"""
        print(f"{self.name} is now sitting.")

    def roll_over(self):
        """模拟小狗收到命令时打滚。"""
        print(f"{self.name} rolled over!")

# 根据约定，在Python中，首字母大写的
# 名称指的是类。这个类定义中没有圆括号，因为要从空白创建这个类。
# 下面的则是对这个类的功能做了描述

# 方法__init__()
# 类中的函数称为方法 。你在前面学到的有关函数的一切都适用于方法，就目前而
# 言，唯一重要的差别是调用方法的方式。

# 法__init__() 是一个特殊方
# 法，每当你根据Dog 类创建新实例时，Python都会自动运行它。在这个方法的名称
# 中，开头和末尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通
# 方法发生名称冲突。务必确保__init__() 的两边都有两个下划线，否则当你使用
# 类来创建实例时，将不会自动调用这个方法，进而引发难以发现的错误。

# 我们将方法__init__() 定义成包含三个形参：self 、name 和age 。在这个方
# 法的定义中，形参self 必不可少，而且必须位于其他形参的前面。为何必须在方
# 法定义中包含形参self 呢？因为Python调用这个方法来创建Dog 实例时，将自动
# 传入实参self 。每个与实例相关联的方法调用都自动传递实参self ，它是一个指
# 向实例本身的引用，让实例能够访问类中的属性和方法。创建Dog 实例时，Python
# 将调用Dog 类的方法__init__() 。我们将通过实参向Dog() 传递名字和年龄，
# self 会自动传递，因此不需要传递它。每当根据Dog 类创建实例时，都只需给最
# 后两个形参（name 和age ）提供值。

# 以self 为前缀的变量可供类中的所有方法使
# 用，可以通过类的任何实例来访问。 self.name在sit和roll_over中也可使用 像这样可通过实例访问的变量称为属性 。

# sit() 和roll_over()的形参self也是自动的


# 根据类创建实例
my_dog = Dog('Willie', 6)
# 这个就是一条叫willie，6岁的狗
# 通常可认为首字母大写的名称（如Dog ）指的是类，而小写的名称（如
# my_dog ）指的是根据类创建的实例
print(f"My dog's name is {my_dog.name}.")
print(f"My dog is {my_dog.age} years old.")

# 访问属性
# 要访问实例的属性，可使用句点表示法。
# my_dog.name
# 句点表示法在Python中很常用，这种语法演示了Python如何获悉属性的值。在
# 这里， Python先找到实例my_dog ，再查找与该实例相关联的属性name 。在
# Dog 类中引用这个属性时，使用的是self.name 。

# 调用方法
# 根据Dog 类创建实例后，就能使用句点表示法来调用Dog 类中定义的任何方法了
my_dog = Dog('Willie', 6)
my_dog.sit()
my_dog.roll_over()

# 创建多个实例
my_dog = Dog('Willie', 6)
your_dog = Dog('Lucy', 3)

print(f"My dog's name is {my_dog.name}.")
print(f"My dog is {my_dog.age} years old.")
my_dog.sit()

print(f"\nYour dog's name is {your_dog.name}.")
print(f"Your dog is {your_dog.age} years old.")
your_dog.sit()



