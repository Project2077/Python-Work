# 列表让你能够在一个地方存储成组的信息，其中可以只包含几个元素，也可以包含
# 数百万个元素。列表是新手可直接使用的最强大的Python功能之一，它融合了众多
# 重要的编程概念。

"""列表 由一系列按特定顺序排列的元素组成。你可以创建包含字母表中所有字母、数字0
～9或所有家庭成员姓名的列表；也可以将任何东西加入列表中，其中的元素之间可以没
有任何关系。列表通常包含多个元素，因此给列表指定一个表示复数的名称（如
letters 、digits 或names ）是个不错的主意。"""

# 在Python中，用方括号（[] ）表示列表，并用逗号分隔其中的元素。下面是一个简单的
# 列表示例，其中包含几种自行车

bicycles = ['trek', 'cannondale', 'redline', 'specialized']
print(bicycles)
# 如果让Python将列表打印出来，Python将打印列表的内部表示，包括方括号：
# ['trek', 'cannondale', 'redline', 'specialized']
# 鉴于这不是你要让用户看到的输出，下面来学习如何访问列表元素。


# 访问列表元素
# 列表是有序集合，因此要访问列表的任意元素，只需将该元素的位置（索引 ）告诉
# Python即可。要访问列表元素，可指出列表的名称，再指出元素的索引，并将后者放在
# 方括号内。
print(bicycles[0])
# trek 当你请求获取列表元素时，Python只返回该元素，而不包括方括号  
# 这正是你要让用户看到的结果——整洁、干净的输出

# 你还可以对任意列表元素调用第2章介绍的字符串方法。例如，可使用方法title() 让
# 元素'trek' 的格式更整洁
print(bicycles[0].title())

# 注意：索引从0开始而非1  第一个列表元素的索引为0，而不是1。多数编程语言是如此规定的，这与
# 列表操作的底层实现相关。如果结果出乎意料，请看看你是否犯了简单的差一错误。

# Python为访问最后一个列表元素提供了一种特殊语法。通过将索引指定为-1 ，可让
# Python返回最后一个列表元素
print(bicycles[-1])

# 这种语法很有用，因为你经常需要在不知道列表长度
# 的情况下访问最后的元素。这种约定也适用于其他负数索引。例如，索引-2 返回倒数第
# 二个列表元素，索引-3 返回倒数第三个列表元素，依此类推。


# 你可以像使用其他变量一样使用列表中的各个值。例如，可以使用f字符串根据列表中的
# 值来创建消息。
message=f"My first bicycle is {bicycles[-2].title()}"
print(message)
