"""
                测试代码
编写函数或类时，还可为其编写测试。通过测试，可确定代码
面对各种输入都能够按要求的那样工作。测试让你深信，即便有更多人使用你
的程序，它也能正确地工作。在程序中添加新代码时，也可以对其进行测试，
确认不会破坏程序既有的行为。程序员都会犯错，因此每个程序员都必须经常
测试其代码，在用户发现问题前找出它们。

在本章中，你将学习如何使用Python模块unittest 中的工具来测试代码，还
将学习编写测试用例，核实一系列输入都将得到预期的输出。你将看到测试通
过了是什么样子，测试未通过又是什么样子，还将知道测试未通过如何有助于
改进代码。你将学习如何测试函数和类，并将知道该为项目编写多少个测试。

"""


# 测试函数
# 要学习测试，必须有要测试的代码。下面是一个简单的函数，它接受名和姓并返回整洁的姓名：
# def get_formatted_name(first, last):
#     """生成整洁的姓名。"""
#     full_name = f"{first} {last}"
#     return full_name.title()


# 未通过的测试
# 测试未通过时结果是什么样的呢？我们来修改get_formatted_name() ，使其能
# 够处理中间名，但同时故意让该函数无法正确处理像Janis Joplin这样只有名和姓的姓名。
# 函数get_formatted_name() 的新版本，它要求通过一个实参指定中间名
# def get_formatted_name(first, middle, last):
#     """生成整洁的姓名。"""
#     full_name = f"{first} {middle} {last}"
#     return full_name.title()

# 测试未通过时怎么办
# 测试未通过时怎么办呢？
# 如果你检查的条件没错，测试通过意味着函数的行为是对的，而测试未通过意味着编写的新代码有错。
# 因此，测试未通过时，不要修改测试，
# 而应修复导致测试不能通过的代码：检查刚刚对函数所做的修改，找出导致函数行为不符合预期的修改。

# 在本例中，get_formatted_name() 以前只需要名和姓两个实参，但现在要求提
# 供名、中间名和姓。新增的中间名参数是必不可少的，这导致
# get_formatted_name() 的行为不符合预期。就这里而言，最佳的选择是让中间
# 名变为可选的。这样做后，使用类似于Janis Joplin的姓名进行测试时，测试就又
# 能通过了，而且也可以接受中间名。下面来修改get_formatted_name() ，将中
# 间名设置为可选的，然后再次运行这个测试用例。如果通过了，就接着确认该函数能够妥善地处理中间名。

# 要将中间名设置为可选的，可在函数定义中将形参middle 移到形参列表末尾，并
# 将其默认值指定为一个空字符串。还需要添加一个if 测试，以便根据是否提供了中间名相应地创建姓名
def get_formatted_name(first, last, middle=''):
    """生成整洁的姓名。"""
    if middle:
        full_name = f"{first} {middle} {last}"
    else:
        full_name = f"{first} {last}"
    return full_name.title()

# 我们无须手工测试这个函数。这个函数之所以很容易修复，是
# 因为未通过的测试让我们得知新代码破坏了函数原来的行为。


