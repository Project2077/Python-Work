# The Python Standard Library Python标准库

"""
Python标准库 是一组模块，我们安装的Python都包含它。你现在对函数和类的工作
原理已有大致的了解，可以开始使用其他程序员编写好的模块了。可以使用标准库
中的任何函数和类，只需在程序开头包含一条简单的import 语句即可。下面来看
看模块random ，它在你模拟很多现实情况时很有用。

"""
# 在这个模块中，一个有趣的函数是randint() 。它将两个整数作为参数，并随机
# 返回一个位于这两个整数之间（含）的整数。下面演示了如何生成一个位于1和6之间的随机整数：
from random import randint

print(randint(1, 6))

# 在模块random 中，另一个有用的函数是choice() 。它将一个列表或元组作为参
# 数，并随机返回其中的一个元素
from random import choice

players = ['charles', 'martina', 'michael', 'florence', 'eli']
first_up = choice(players)
print(first_up)

# 创建与安全相关的应用程序时，请不要使用模块random ，但该模块可以很好地用于创建众多有趣的项目。

# 注意 　还可以从其他地方下载外部模块。第二部分的每个项目都需要使用外部模块，届时你将看到很多此类示例。

# 类编码风格
# 你必须熟悉有些与类相关的编码风格问题，在编写的程序较复杂时尤其如此。

# !!! 类名应采用驼峰命名法 ，即将类名中的每个单词的首字母都大写，而不使用下划
# 线。实例名和模块名都采用小写格式，并在单词之间加上下划线。

# 对于每个类，都应紧跟在类定义后面包含一个文档字符串。这种文档字符串简要地
# 描述类的功能，并遵循编写函数的文档字符串时采用的格式约定。每个模块也都应
# 包含一个文档字符串，对其中的类可用于做什么进行描述。

# 可使用空行来组织代码，但不要滥用。在类中，可使用一个空行来分隔方法；而在
# 模块中，可使用两个空行来分隔类。

# 需要同时导入标准库中的模块和你编写的模块时，先编写导入标准库模块的import
# 语句，再添加一个空行，然后编写导入你自己编写的模块的import 语句。在包含
# 多条import 语句的程序中，这种做法让人更容易明白程序使用的各个模块都来自何处。

