### 整数 加（+ ）减（- ）乘（* ）除（/ ）运算
print(2+3)
print(3-2)
print(2*3)
print(3/2)

### 在终端会话中(比如windows的cmd)，Python直接返回运算结果。 可以自己试试

### Python使用两个乘号表示乘方运算 **
print(3**2)
print(3**3)
print(10**6)

### Python还支持运算次序，因此可在同一个表达式中使用多种运算。还可以使用圆括号来
### 修改运算次序，让Python按你指定的次序执行运算  
print(2 +3*3)
print((2+3)*4)
### 空格不影响运算


### 浮点数 python将所有带小数点的数称为浮点数。
print( 0.1 + 0.1)
print(0.2+0.2)
print(2*0.1)
print(2*0.2)

### 总体上没什么不同点 一般都能正常运行。但需注意，结果包含的小数位数可能是不确定的
print(0.2+0.1)
print(3*0.1)
### 所有语言都存在这种问题，没有什么可担心的。Python会尽力找到一种精确表示结果的
### 方法，但鉴于计算机内部表示数的方式，这在有些情况下很难。就现在而言，暂时忽略
### 多余的小数位数即可。在第二部分的项目中，你将在需要时学习处理多余小数位的方
### 式。

### 将任意两个数相除时，结果总是浮点数，即便这两个数都是整数且能整除
print(4/2)
### 在其他任何运算中，如果一个操作数是整数，另一个操作数是浮点数，结果也总是浮点数
print(1+2.0)
### 无论是哪种运算，只要有操作数是浮点数，Python默认得到的总是浮点数，即便结果原
### 本为整数也是如此


### 数中的下划线
### 书写很大的数时，可使用下划线将其中的数字分组，使其更清晰易读
### 当你打印这种使用下划线定义的数时，Python不会打印其中的下划线
universe_age = 14_000_000_000
print(universe_age)


### python可以给多个变量同时赋值
x, y, z = 0, 0, 1
### 这样做时，需要用逗号将变量名分开；对于要赋给变量的值，也需同样处理。Python将
### 按顺序将每个值赋给对应的变量。只要变量和值的个数相同，Python就能正确地将它们
#   关联起来。
print(x)
print(y)
print(z)


### 常量  类似于变量，但其值在程序的整个生命周期内保持不变。Python没有内置的常量类
### 型，但Python程序员会使用全大写来指出应将某个变量视为常量，其值应始终不变
MAX_CONNECTIONS = 5000
print(MAX_CONNECTIONS)
MAX_CONNECTIONS = 6000
print(MAX_CONNECTIONS)
### 应不变 但可以变    这只是一个约定俗成的规定   